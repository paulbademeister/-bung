def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

SymbolToNumber = {'A':0, 'C':1, 'G':2, 'T':3}
NumberToSymbol = {0:'A', 1:'C', 2:'G', 3:'T'}

def numbertopattern(index,k):
    if k == 1:
        return NumberToSymbol[index]
    prefixindex = index // 4
    r = index % 4
    prefixPattern = numbertopattern(prefixindex, k - 1)
    return prefixPattern + NumberToSymbol[r]


def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

def medianString(dna, k):
	distance = (k+1) * len(dna)
	median = ""
	for i in range(4**k):
		pattern = numbertopattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

dna = ["AAATTGACGCAT", "GACGACCACGTT", "CGTCAGCGCCTG", "GCTGAGCACCGG", "AGTACGGGACAG"]
k = 3
print(medianString(dna, k))
